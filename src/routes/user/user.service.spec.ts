import { REQUEST } from '@nestjs/core';
import { getModelToken } from '@nestjs/mongoose';
import { Test, TestingModule } from '@nestjs/testing';
import { Model } from 'mongoose';
import {
  IIMAGE_SERVICE,
  INOTICE_SERVICE,
  IPLACE_SERVICE,
  IUSER_REPOSITORY,
} from 'src/utils/di.tokens';
import { UserService } from './user.service';
import { DB_SCHEMA } from 'src/Constants/DB_SCHEMA';

// üß™ ÌÖåÏä§Ìä∏Ïö© Mock Îç∞Ïù¥ÌÑ∞ Ï†ïÏùò
const mockUser = {
  _id: {
    $oid: '66766dfb23da9f3ed67534a0',
  },
  uid: '2283035576',
  name: 'Ï±ÑÎØºÍ¥Ä',
  role: 'previliged',
  profileImage:
    'http://k.kakaocdn.net/dn/iCiHH/btsKTajJp3n/nGlGkESNb57UGk0ZBb84G1/img_110x110.jpg',
  isActive: true,
  email: '2283035576',
  emailVerified: null,
  birth: '000503',
  comment: 'ÏïàÎÖïÌïòÏÑ∏Ïöî!',
  deposit: 4900,
  gender: 'ÎÇ®ÏÑ±',
  interests: {
    first: 'ÏΩîÎî©',
    second: 'ÎèÖÏÑú',
    createdAt: {
      $date: '2024-07-05T13:15:30.114Z',
    },
    updatedAt: {
      $date: '2024-07-05T13:15:30.114Z',
    },
  },
  location: 'ÎèôÎåÄÎ¨∏',
  majors: [
    {
      department: 'Í≥µÌïôÍ≥ÑÏó¥',
      detail: 'Ïª¥Ìì®ÌÑ∞/ÌÜµÏã†',
      createdAt: {
        $date: '2024-07-05T13:15:30.114Z',
      },
      updatedAt: {
        $date: '2024-07-05T13:15:30.114Z',
      },
    },
  ],
  mbti: 'INFP',
  registerDate: 'Sat Jun 22 2024 15:24:42 GMT+0900 (ÎåÄÌïúÎØºÍµ≠ ÌëúÏ§ÄÏãú)',
  telephone: 'U2FsdGVkX19Yixzf83+ZZi79c1OKNKl9c9iXQ5HwO3M=',
  monthScore: 0,
  __v: 1,
  friend: [],
  like: 1,
  point: 1074,
  score: 41,
  instagram: '',
  isPrivate: false,
  studyPreference: {
    subPlace: [],
    place: {
      $oid: '661cd8d3aaae875d410236d0',
    },
  },
  locationDetail: {
    text: 'ÌöåÍ∏∞Ïó≠ 1Ìò∏ÏÑ†',
    lat: 37.5897962196601,
    lon: 127.058048369273,
  },
  weekStudyTragetHour: 0,
  weekStudyAccumulationMinutes: 0,
  weekStudyTargetHour: 3,
  avatar: {
    type: 1,
    bg: 1,
  },
  ticket: {
    gatherTicket: 2,
    groupStudyTicke: 4,
  },
  badge: {
    badgeIdx: 1,
    badgeList: [1],
  },
};

// üß™ UserService ÌÖåÏä§Ìä∏ Ïä§ÏúÑÌä∏
describe('UserService', () => {
  let service: UserService;
  let userRepository: any;
  let requestMock: any;

  // üîÑ Í∞Å ÌÖåÏä§Ìä∏ Ï†ÑÏóê Ïã§ÌñâÎêòÎäî ÏÑ§Ï†ï
  beforeEach(async () => {
    // üìö Mock Repository ÏÉùÏÑ±
    userRepository = {
      findByUid: jest.fn((uid) => (uid === '1234' ? { ...mockUser } : null)),
      findByUserId: jest.fn((userId) =>
        userId === 'testUser' ? { ...mockUser } : null,
      ),
      findByUids: jest.fn((uids) => uids.map((uid) => ({ ...mockUser, uid }))),
      getBadgeList: jest.fn((uid: string) =>
        uid === mockUser.uid ? mockUser.badge.badgeList : null,
      ),
      selectbadge: jest.fn().mockResolvedValue(null),
    };

    // üåê Request Mock Í∞ùÏ≤¥ ÏÉùÏÑ±
    requestMock = {
      decodedToken: { userId: 'testUser', uid: '2283035576' },
    };

    // üèóÔ∏è Testing Module ÏÉùÏÑ±
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        UserService,
        {
          provide: IUSER_REPOSITORY,
          useValue: userRepository,
        },
        {
          provide: getModelToken('Vote'),
          useValue: Model,
        },
        {
          provide: getModelToken(DB_SCHEMA.LOG),
          useValue: Model,
        },
        {
          provide: IPLACE_SERVICE,
          useValue: {},
        },
        {
          provide: INOTICE_SERVICE,
          useValue: {},
        },
        {
          provide: IIMAGE_SERVICE,
          useValue: {},
        },
        {
          provide: REQUEST,
          useValue: requestMock,
        },
      ],
    }).compile();

    service = await module.resolve<UserService>(UserService);
  });

  // üßπ Í∞Å ÌÖåÏä§Ìä∏ ÌõÑ Ïã§ÌñâÎêòÎäî Ï†ïÎ¶¨
  afterEach(() => {
    jest.clearAllMocks(); // Î™®Îì† Mock Ìò∏Ï∂ú Í∏∞Î°ù Ï¥àÍ∏∞Ìôî
  });

  // üìã ÌÖåÏä§Ìä∏ Í∑∏Î£π: ÏÇ¨Ïö©Ïûê Ï°∞Ìöå Í∏∞Îä•
  describe('ÏÇ¨Ïö©Ïûê Ï°∞Ìöå Í∏∞Îä•', () => {
    // ‚úÖ ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§ 1: UIDÎ°ú ÏÇ¨Ïö©Ïûê Ï°∞Ìöå ÏÑ±Í≥µ
    it('UIDÎ°ú ÏÇ¨Ïö©ÏûêÎ•º ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï°∞ÌöåÌï¥Ïïº ÌïúÎã§', async () => {
      // Arrange (Ï§ÄÎπÑ)
      const testUid = '1234';
      const expectedUser = { ...mockUser };

      // Act (Ïã§Ìñâ)
      const result = await service.getUserWithUid(testUid);

      // Assert (Í≤ÄÏ¶ù)
      expect(result).toBeDefined();
      expect(result.uid).toBe(expectedUser.uid);
      expect(result.name).toBe(expectedUser.name);
      expect(userRepository.findByUid).toHaveBeenCalledWith(testUid);
      expect(userRepository.findByUid).toHaveBeenCalledTimes(1);
    });

    // ‚ùå ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§ 2: Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî UIDÎ°ú Ï°∞Ìöå Ïã§Ìå®
    it('Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî UIDÎ°ú Ï°∞ÌöåÌïòÎ©¥ nullÏùÑ Î∞òÌôòÌï¥Ïïº ÌïúÎã§', async () => {
      // Arrange
      const nonExistentUid = '9999';

      // Act
      const result = await service.getUserWithUid(nonExistentUid);

      // Assert
      expect(result).toBeNull();
      expect(userRepository.findByUid).toHaveBeenCalledWith(nonExistentUid);
    });

    // ‚úÖ ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§ 3: ÏÇ¨Ïö©Ïûê IDÎ°ú ÏÇ¨Ïö©Ïûê Ï°∞Ìöå ÏÑ±Í≥µ
    it('ÏÇ¨Ïö©Ïûê IDÎ°ú ÏÇ¨Ïö©ÏûêÎ•º ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï°∞ÌöåÌï¥Ïïº ÌïúÎã§', async () => {
      // Arrange
      const testUserId = 'testUser';

      // Act
      const result = await service.getUserWithUserId(testUserId);

      // Assert
      expect(result).toBeDefined();
      expect(result.uid).toBe(mockUser.uid);
      expect(userRepository.findByUserId).toHaveBeenCalledWith(testUserId);
    });

    // ‚úÖ ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§ 4: Ïó¨Îü¨ UIDÎ°ú ÏÇ¨Ïö©ÏûêÎì§ Ï°∞Ìöå ÏÑ±Í≥µ
    it('Ïó¨Îü¨ UIDÎ°ú ÏÇ¨Ïö©ÏûêÎì§ÏùÑ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï°∞ÌöåÌï¥Ïïº ÌïúÎã§', async () => {
      // Arrange
      const testUids = ['1234', '5678', '9012'];
      const expectedCount = testUids.length;

      // Act
      const results = await service.getUsersWithUids(testUids);

      // Assert
      expect(results).toHaveLength(expectedCount);
      expect(userRepository.findByUids).toHaveBeenCalledWith(testUids);

      // Í∞Å Í≤∞Í≥ºÍ∞Ä Ïò¨Î∞îÎ•∏ UIDÎ•º Í∞ÄÏßÄÍ≥† ÏûàÎäîÏßÄ ÌôïÏù∏
      results.forEach((result, index) => {
        expect(result.uid).toBe(testUids[index]);
      });
    });
  });

  // üìã ÌÖåÏä§Ìä∏ Í∑∏Î£π: Î∞∞ÏßÄ Í¥ÄÎ†® Í∏∞Îä•
  describe('Î∞∞ÏßÄ Í¥ÄÎ†® Í∏∞Îä•', () => {
    // ‚úÖ ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§ 5: Î∞∞ÏßÄ ÏÑ†ÌÉù ÏÑ±Í≥µ
    it('Ïú†Ìö®Ìïú Î∞∞ÏßÄ Ïù∏Îç±Ïä§Î°ú Î∞∞ÏßÄÎ•º ÏÑ†ÌÉùÌï† Ïàò ÏûàÏñ¥Ïïº ÌïúÎã§', async () => {
      // Arrange
      const validBadgeIdx = 1;

      // Act
      const result = await service.selectBadge(validBadgeIdx);

      // Assert
      expect(result).toBe(null); // MockÏóêÏÑú nullÏùÑ Î∞òÌôòÌïòÎèÑÎ°ù ÏÑ§Ï†ïÎê®
      expect(userRepository.selectbadge).toHaveBeenCalledWith(validBadgeIdx);
    });

    // ‚ùå ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§ 6: Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Î∞∞ÏßÄ Ïù∏Îç±Ïä§Î°ú Î∞∞ÏßÄ ÏÑ†ÌÉù Ïã§Ìå®
    it('Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Î∞∞ÏßÄ Ïù∏Îç±Ïä§Î°ú Î∞∞ÏßÄ ÏÑ†ÌÉù Ïãú ÏóêÎü¨Î•º ÎçòÏ†∏Ïïº ÌïúÎã§', async () => {
      // Arrange
      const invalidBadgeIdx = 2;

      // Act & Assert
      await expect(service.selectBadge(invalidBadgeIdx)).rejects.toThrow(
        'no badge',
      );
    });
  });

  // üìã ÌÖåÏä§Ìä∏ Í∑∏Î£π: Ïú†Ìã∏Î¶¨Ìã∞ Î©îÏÑúÎìú
  describe('Ïú†Ìã∏Î¶¨Ìã∞ Î©îÏÑúÎìú', () => {
    // ‚úÖ ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§ 7: ÏøºÎ¶¨ Î¨∏ÏûêÏó¥ ÏÉùÏÑ±
    it('Î¨∏ÏûêÏó¥ Î∞∞Ïó¥Î°úÎ∂ÄÌÑ∞ Ïò¨Î∞îÎ•∏ ÏøºÎ¶¨ Î¨∏ÏûêÏó¥ÏùÑ ÏÉùÏÑ±Ìï¥Ïïº ÌïúÎã§', () => {
      // Arrange
      const testArray = ['name', 'email', 'age'];
      const expectedResult = ' name email age';

      // Act
      const result = service.createQueryString(testArray);

      // Assert
      expect(result).toBe(expectedResult);
    });

    // ‚úÖ ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§ 8: Îπà Î∞∞Ïó¥Î°ú ÏøºÎ¶¨ Î¨∏ÏûêÏó¥ ÏÉùÏÑ±
    it('Îπà Î∞∞Ïó¥Î°ú ÏøºÎ¶¨ Î¨∏ÏûêÏó¥ÏùÑ ÏÉùÏÑ±ÌïòÎ©¥ Îπà Î¨∏ÏûêÏó¥ÏùÑ Î∞òÌôòÌï¥Ïïº ÌïúÎã§', () => {
      // Arrange
      const testArray: string[] = [];
      const expectedResult = '';

      // Act
      const result = service.createQueryString(testArray);

      // Assert
      expect(result).toBe(expectedResult);
    });
  });

  // üìã ÌÖåÏä§Ìä∏ Í∑∏Î£π: Mock ÎèôÏûë Í≤ÄÏ¶ù
  describe('Mock ÎèôÏûë Í≤ÄÏ¶ù', () => {
    // ‚úÖ ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§ 9: Mock Ìï®Ïàò Ìò∏Ï∂ú Í≤ÄÏ¶ù
    it('Mock Ìï®ÏàòÎì§Ïù¥ Ïò¨Î∞îÎ•¥Í≤å Ìò∏Ï∂úÎêòÏñ¥Ïïº ÌïúÎã§', async () => {
      // Arrange
      const testUid = '1234';

      // Act
      await service.getUserWithUid(testUid);

      // Assert
      expect(userRepository.findByUid).toHaveBeenCalled();
      expect(userRepository.findByUid).toHaveBeenCalledWith(testUid);
      expect(userRepository.findByUid).toHaveBeenCalledTimes(1);
    });

    // ‚úÖ ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§ 10: Mock Ìï®Ïàò Ìò∏Ï∂úÎêòÏßÄ ÏïäÏùå Í≤ÄÏ¶ù
    it('ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏùÄ Mock Ìï®ÏàòÎäî Ìò∏Ï∂úÎêòÏßÄ ÏïäÏïÑÏïº ÌïúÎã§', () => {
      // Act
      service.createQueryString(['test']);

      // Assert
      expect(userRepository.findByUid).not.toHaveBeenCalled();
      expect(userRepository.findByUserId).not.toHaveBeenCalled();
    });
  });
});
